@model inventory_360.Models.Client

@{
    ViewData["Title"] = "Create";
}

@section Scripts {
    
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCylJotEqA54JOf7LSyz_5zMgPCI_vu_H4&libraries=places&callback=initialize" async defer></script>
    <script>
        var directionsDisplay,
            directionsService,
            map,
            input,
            autocomplete,
            marker;

        function initialize() {
            loadMap();
            loadMarker();
            loadAddressBar();
        }

        function loadMarker(){
            marker = new google.maps.Marker({map: map, title:"marker"});
        }

        function loadMap(){

            var earth = new google.maps.LatLng(0, 0);
            var mapOptions = {
                zoom: 1,
                disableDefaultUI: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                center: earth,
                draggable: false, 
                zoomControl: false, 
                scrollwheel: false, 
                disableDoubleClickZoom: true,
                keyboardShortcuts: false,
                clickableIcons: false
            }

            map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
        }

        function loadAddressBar(){

            input = document.getElementById('autocomplete');
            autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            google.maps.event.addListener(autocomplete, 'place_changed', function () {
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    return;
                }
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setPlace(({
                    placeId: place.place_id,
                    location: place.geometry.location
                }));
            });
        }

    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<h1>Create</h1>

<h4>Client</h4> 
<hr />
<div class="row">
    <div class="col-md-5">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                    <input asp-for="Address" id="autocomplete" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div id="map_canvas" class="form-group" style="height: 354px; width:713px;"></div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

